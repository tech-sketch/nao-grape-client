<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheBox xar_version="3">
    <Box name="root" id="6" localization="8" tooltip="" x="131" y="400">
        <bitmap>media/images/box/box-diagram.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る。" id="4" />
        <Parameter name="ws_url" inherits_from_parent="0" content_type="3" value="ws://localhost:3000" default_value="ws://localhost:3000" custom_choice="0" tooltip="" id="5" />
        <Parameter name="use_global_url" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="6" />
        <Timeline enable="0">
            <BehaviorLayer name="behavior_layer1">
                <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                        <Box name="WS Connection" id="2" localization="8" tooltip="" x="235" y="34">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import json

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def _init_read_library(self):
        import sys, os

        self.folderName = os.path.join(
            self.framemanager.getBehaviorPath(self.behaviorId), './lib')

        if self.folderName not in sys.path:
            sys.path.append(self.folderName)

    def _init_websocket_connection(self):
        import websocket

        websocket.enableTrace(True)
        websocket.setdefaulttimeout(500)

        use_global_url = self.getParameter("use_global_url")

        if use_global_url:
            ws_url = self.memory.getData("global_ws_url")

        else:
            ws_url = self.getParameter("ws_url")

        self.ws = websocket.WebSocketApp(ws_url + '/rs',
                                         on_message=self._ws_on_message,
                                         on_error=self._ws_on_error,
                                         on_close=self._ws_on_close)

        self.ws.on_open = self._ws_on_open
        self.ws.run_forever()

    def _ws_send_message(self, input_json):
        try:
            json_data = json.dumps(input_json)
            self.ws.send(json_data)

        except ValueError:
            self.logger.error('websocket error has occurred')

    def _ws_on_open(self, ws):
        self.logger.info('websocket onopen')

    def _ws_on_message(self, ws, ws_message):
        self.logger.info('websocket onmessage: ' + ws_message)

        try:
            ws_message = json.loads(ws_message)
            to = str(ws_message["to"])

            robot_behavior = ws_message["robotBehavior"]
            tablet_action = str(robot_behavior["tabletAction"])
            self.logger.info('websocket tablet_action: ' + tablet_action)

        except Exception as e:
            self.logger.error("type: %s" % type(e))
            self.logger.error("args: %s" % e.args)
            self.logger.error("message: %s" % e.message)
            self.logger.error("%s" % e)

        if tablet_action == "select_menu":
            menu_id = str(robot_behavior["menuId"])
            selection_id = str(robot_behavior["selectionId"])

            message = {"key": menu_id, "value": selection_id}

            if self.freez == False:
                self.onMessageReceived(json.dumps(message))

    def _ws_on_close(self, ws):
        self.logger.info('websocket onclose')

    def _ws_on_error(self, ws, error):
        self.logger.error('websocket onerror: ' + error)
        self.output_connection_error()

    def onLoad(self):
        self.ws = None
        self.freez = False
        self.connectonToken = None

        self.framemanager = ALProxy("ALFrameManager")
        self.memory = ALProxy("ALMemory")

        self.isVirtualRobot = False

    def onUnload(self):

        self.ws.close()

        self.ws = None
        self.freez = False
        self.connectonToken = None

        self.framemanager = None
        self.memory = None

    def onInput_onStart(self):

        self._init_read_library()
        self._init_websocket_connection()

        self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る。" id="4" />
                            <Output name="onMessageReceived" type="3" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                            <Parameter name="ws_url" inherits_from_parent="1" content_type="3" value="ws://localhost:3000" default_value="ws://localhost:3000" custom_choice="0" tooltip="" id="6" />
                            <Parameter name="use_global_url" inherits_from_parent="1" content_type="0" value="1" default_value="1" tooltip="" id="7" />
                        </Box>
                        <Box name="Log" id="4" localization="8" tooltip="Prompt the message in the debug window. You can set a prefix and a priority&#x0A;for the message in the parameters." x="516" y="38">
                            <bitmap>media/images/box/print.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_message(self, p):
        sPriority = self.getParameter("Priority")
        sMessage = self.getParameter("Message prefix")
        if( sMessage != "" and p != None ):
            sMessage += ": "
        if( p != None ):
            sMessage += str(p)
        if( sPriority == "Fatal" ):
            self.logger.fatal( sMessage )
        elif( sPriority == "Error" ):
            self.logger.error( sMessage )
        elif( sPriority == "Warning" ):
            self.logger.warning( sMessage )
        elif( sPriority == "Info" ):
            self.logger.info( sMessage )
        elif( sPriority == "Debug" ):
            self.logger.debug( sMessage )
        self.onDone()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="message" type="0" type_size="1" nature="1" inner="0" tooltip='The message to print or a &quot;Bang&quot; to only print the message set as parameter.' id="2" />
                            <Output name="onDone" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                            <Parameter name="Message prefix" inherits_from_parent="0" content_type="3" value="WS Message Received: " default_value="Message text" custom_choice="0" tooltip="Enter the text you want to print before the input message." id="4" />
                            <Parameter name="Priority" inherits_from_parent="0" content_type="3" value="Info" default_value="Info" custom_choice="0" tooltip="Enter the priority of your message. If you select error, the box will get red when it will be stimulated." id="5">
                                <Choice value="Fatal" />
                                <Choice value="Error" />
                                <Choice value="Warning" />
                                <Choice value="Info" />
                                <Choice value="Debug" />
                            </Parameter>
                        </Box>
                        <Box name="Raise Event" id="5" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key, and spreads the event to all its subscribers." x="524" y="152">
                            <bitmap>media/images/box/sensors/STM.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")

    def onUnload(self):
        self.memory = None

    def onInput_onStart(self, p):
        import json

        data = json.loads(p)
        key = str(data["key"])
        value = str(data["value"])

        self.memory.raiseEvent(key, value)
        self.onStopped(key)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted as an event in ALMemory." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" />
                            <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" />
                        </Box>
                        <Box name="Only Once" id="1" localization="8" tooltip="This box&apos;s output is stimulated only the first time the onSignal input is.&#x0A;&#x0A;Note: It is reset when the diagram containing the box is unloaded." x="90" y="37">
                            <bitmap>media/images/box/loop.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bFirstTime = True

    def onUnload(self):
        self.bFirstTime = True

    def onInput_onSignal(self):
        if( self.bFirstTime ):
            self.bFirstTime = False
            self.firstTime()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onSignal" type="1" type_size="1" nature="1" inner="0" tooltip="The signal that must pass only once." id="2" />
                            <Output name="firstTime" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent first time the onSignal input is stimulated." id="3" />
                        </Box>
                        <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="5" />
                        <Link inputowner="5" indexofinput="2" outputowner="2" indexofoutput="5" />
                        <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
        </Timeline>
    </Box>
</ChoregrapheBox>
